{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { projectFirestore } from '../Firebase/config'; // Tällä hookilla haetaan kuvat Firebasesta\n\nconst useFirestore = collection => {\n  _s();\n\n  //hookki useFirestore = Kollektioni (kuvat)\n  const [docs, setDocs] = useState([]);\n  useEffect(() => {\n    //callback funktio\n    const unsub = projectFirestore.collection(collection) //otataan collectioni images\n    .orderBy('createdAt', 'desc') // createdAt on Timestampin property ja desc tarkoittaa sitä, että otetaan asiat uusimmasta vanhimpaan järjestyksessä\n    .onSnapshot(snap => {\n      //jos tiedot muuttuu collectioniossa tämä ajetaan\n      let documents = []; //tehdään tyhjä array\n\n      snap.forEach(doc => {\n        // menee databasen dokumenttejen läpi\n        documents.push({ ...doc.data(),\n          id: doc.id\n        }); // työnnetään dokumentit arrayhyn //({...doc.data() on firebasen oikean puoleisin field ja id: doc.id on imagen randomi koodi keskellä\n      });\n      setDocs(documents);\n    });\n    return () => unsub(); //tämä metodi tulee silloin kun ei enää haeta hookin kautta.\n    // this is a cleanup function that react will run when\n    // a component using the hook unmounts\n  }, [collection]);\n  return {\n    docs\n  }; // palautetaan\n};\n\n_s(useFirestore, \"+T0lE56vJ9KU8atjOm2u+g1P1HQ=\");\n\nexport default useFirestore;","map":{"version":3,"sources":["C:/Koodit/testi/varausjarjestelma/src/hooks/useFirestore.js"],"names":["useState","useEffect","projectFirestore","useFirestore","collection","docs","setDocs","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,oBAAjC,C,CACA;;AACA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AAAA;;AAAE;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAAE;AAChB,UAAMM,KAAK,GAAGL,gBAAgB,CAACE,UAAjB,CAA4BA,UAA5B,EAAwC;AAAxC,KACXI,OADW,CACH,WADG,EACU,MADV,EACkB;AADlB,KAEXC,UAFW,CAEAC,IAAI,IAAI;AAAE;AACpB,UAAIC,SAAS,GAAG,EAAhB,CADkB,CACE;;AACpBD,MAAAA,IAAI,CAACE,OAAL,CAAaC,GAAG,IAAI;AAAE;AACpBF,QAAAA,SAAS,CAACG,IAAV,CAAe,EAAC,GAAGD,GAAG,CAACE,IAAJ,EAAJ;AAAgBC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAAxB,SAAf,EADkB,CAC2B;AAC9C,OAFD;AAGAV,MAAAA,OAAO,CAACK,SAAD,CAAP;AACD,KARW,CAAd;AAUA,WAAO,MAAMJ,KAAK,EAAlB,CAXc,CAWQ;AACtB;AACA;AACD,GAdQ,EAcN,CAACH,UAAD,CAdM,CAAT;AAgBA,SAAO;AAAEC,IAAAA;AAAF,GAAP,CAnBmC,CAmBlB;AAClB,CApBD;;GAAMF,Y;;AAsBN,eAAeA,YAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { projectFirestore } from '../Firebase/config';\r\n// Tällä hookilla haetaan kuvat Firebasesta\r\nconst useFirestore = (collection) => { //hookki useFirestore = Kollektioni (kuvat)\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  useEffect(() => { //callback funktio\r\n    const unsub = projectFirestore.collection(collection) //otataan collectioni images\r\n      .orderBy('createdAt', 'desc') // createdAt on Timestampin property ja desc tarkoittaa sitä, että otetaan asiat uusimmasta vanhimpaan järjestyksessä\r\n      .onSnapshot(snap => { //jos tiedot muuttuu collectioniossa tämä ajetaan\r\n        let documents = []; //tehdään tyhjä array\r\n        snap.forEach(doc => { // menee databasen dokumenttejen läpi\r\n          documents.push({...doc.data(), id: doc.id}); // työnnetään dokumentit arrayhyn //({...doc.data() on firebasen oikean puoleisin field ja id: doc.id on imagen randomi koodi keskellä\r\n        });\r\n        setDocs(documents);\r\n      });\r\n\r\n    return () => unsub(); //tämä metodi tulee silloin kun ei enää haeta hookin kautta.\r\n    // this is a cleanup function that react will run when\r\n    // a component using the hook unmounts\r\n  }, [collection]);\r\n\r\n  return { docs }; // palautetaan\r\n}\r\n\r\nexport default useFirestore;"]},"metadata":{},"sourceType":"module"}
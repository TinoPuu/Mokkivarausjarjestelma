{"ast":null,"code":"var _jsxFileName = \"C:\\\\Koodit\\\\testi\\\\varausjarjestelma\\\\src\\\\comps\\\\UploadForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ProgressBar from './ProgressBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UploadForm = () => {\n  _s();\n\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(null);\n  const types = ['image/png', 'image/jpeg']; //tällä funktiolla näkee jos on tapahnut aktiviteettia\n\n  const changeHandler = e => {\n    let selected = e.target.files[0];\n\n    if (selected && types.includes(selected.type)) {\n      setFile(selected); //jos otettu tietotyyppi on oikea niin tulee tyhjä error\n\n      setError('');\n    } else {\n      setFile(null); // jos joku muu kuin png tai jpeg => Tulee tämä\n\n      setError('Please select an image file (png or jpeg)');\n    }\n  }; // file && <ProgressBar/> toimii, jos file = true => ProgressBar\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: changeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 27\n      }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: file.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 26\n      }, this), file && /*#__PURE__*/_jsxDEV(ProgressBar, {\n        file: file,\n        setFile: setFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this); // file.name näyttää uudelleen saman tekstin valitse tiedoston alla\n};\n\n_s(UploadForm, \"g4In/gal2dmIIDovhnep1NQJW40=\");\n\n_c = UploadForm;\nexport default UploadForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadForm\");","map":{"version":3,"sources":["C:/Koodit/testi/varausjarjestelma/src/comps/UploadForm.js"],"names":["React","useState","ProgressBar","UploadForm","file","setFile","error","setError","types","changeHandler","e","selected","target","files","includes","type","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMO,KAAK,GAAG,CAAC,WAAD,EAAc,YAAd,CAAd,CAHqB,CAKrB;;AACA,QAAMC,aAAa,GAAIC,CAAD,IAAO;AACzB,QAAIC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAf;;AAEA,QAAIF,QAAQ,IAAIH,KAAK,CAACM,QAAN,CAAeH,QAAQ,CAACI,IAAxB,CAAhB,EAA+C;AAC3CV,MAAAA,OAAO,CAACM,QAAD,CAAP,CAD2C,CACxB;;AACnBJ,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,KAHD,MAGO;AACHF,MAAAA,OAAO,CAAC,IAAD,CAAP,CADG,CACY;;AACfE,MAAAA,QAAQ,CAAC,2CAAD,CAAR;AACH;AACJ,GAVD,CANqB,CAiBrB;;;AACA,sBACI;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAEE;AAA7B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,iBACKH,KAAK,iBAAI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,kBAAwBA;AAAxB;AAAA;AAAA;AAAA;AAAA,cADd,EAEKF,IAAI,iBAAI;AAAA,kBAAMA,IAAI,CAACY;AAAX;AAAA;AAAA;AAAA;AAAA,cAFb,EAGKZ,IAAI,iBAAI,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEA,IAAnB;AAAyB,QAAA,OAAO,EAAEC;AAAlC;AAAA;AAAA;AAAA;AAAA,cAHb;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAlBqB,CA2BpB;AAEJ,CA7BD;;GAAMF,U;;KAAAA,U;AA8BN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst UploadForm = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const types = ['image/png', 'image/jpeg'];\r\n\r\n    //tällä funktiolla näkee jos on tapahnut aktiviteettia\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n\r\n        if (selected && types.includes(selected.type)) {\r\n            setFile(selected); //jos otettu tietotyyppi on oikea niin tulee tyhjä error\r\n            setError('');\r\n        } else {\r\n            setFile(null); // jos joku muu kuin png tai jpeg => Tulee tämä\r\n            setError('Please select an image file (png or jpeg)');\r\n        }\r\n    }\r\n    // file && <ProgressBar/> toimii, jos file = true => ProgressBar\r\n    return (\r\n        <form>\r\n            <input type=\"file\" onChange={changeHandler} />\r\n            <div className=\"output\">\r\n                {error && <div className=\"error\">{error}</div>}\r\n                {file && <div>{file.name}</div>}\r\n                {file && <ProgressBar file={file} setFile={setFile} />}\r\n            </div>\r\n        </form>\r\n    )// file.name näyttää uudelleen saman tekstin valitse tiedoston alla\r\n\r\n}\r\nexport default UploadForm;"]},"metadata":{},"sourceType":"module"}